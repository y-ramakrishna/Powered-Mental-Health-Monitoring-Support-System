{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":2250642,"sourceType":"datasetVersion","datasetId":1075326}],"dockerImageVersionId":31090,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport re\nimport string\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report, accuracy_score, confusion_matrix\nimport lime\nimport lime.lime_text\nimport joblib\n\nnltk.download('stopwords', quiet=True)\nnltk.download('wordnet', quiet=True)\nnltk.download('punkt', quiet=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-15T16:44:07.299713Z","iopub.execute_input":"2025-07-15T16:44:07.300279Z","iopub.status.idle":"2025-07-15T16:44:07.306390Z","shell.execute_reply.started":"2025-07-15T16:44:07.300256Z","shell.execute_reply":"2025-07-15T16:44:07.305739Z"}},"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"True"},"metadata":{}}],"execution_count":10},{"cell_type":"code","source":"file_path = '/kaggle/input/suicide-watch/Suicide_Detection.csv'\ndf = pd.read_csv(file_path)\n\nprint(\"Dataset Head:\")\nprint(df.head())\nprint(\"\\nDataset Info:\")\ndf.info()\nprint(\"\\nMissing Values:\")\nprint(df.isnull().sum())\nprint(\"\\nLabel Distribution:\")\nprint(df['class'].value_counts())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-15T16:46:26.313473Z","iopub.execute_input":"2025-07-15T16:46:26.313744Z","iopub.status.idle":"2025-07-15T16:46:28.679989Z","shell.execute_reply.started":"2025-07-15T16:46:26.313706Z","shell.execute_reply":"2025-07-15T16:46:28.679232Z"}},"outputs":[{"name":"stdout","text":"Dataset Head:\n   Unnamed: 0                                               text        class\n0           2  Ex Wife Threatening SuicideRecently I left my ...      suicide\n1           3  Am I weird I don't get affected by compliments...  non-suicide\n2           4  Finally 2020 is almost over... So I can never ...  non-suicide\n3           8          i need helpjust help me im crying so hard      suicide\n4           9  I’m so lostHello, my name is Adam (16) and I’v...      suicide\n\nDataset Info:\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 232074 entries, 0 to 232073\nData columns (total 3 columns):\n #   Column      Non-Null Count   Dtype \n---  ------      --------------   ----- \n 0   Unnamed: 0  232074 non-null  int64 \n 1   text        232074 non-null  object\n 2   class       232074 non-null  object\ndtypes: int64(1), object(2)\nmemory usage: 5.3+ MB\n\nMissing Values:\nUnnamed: 0    0\ntext          0\nclass         0\ndtype: int64\n\nLabel Distribution:\nclass\nsuicide        116037\nnon-suicide    116037\nName: count, dtype: int64\n","output_type":"stream"}],"execution_count":12},{"cell_type":"code","source":"stop_words = set(stopwords.words('english'))\nlemmatizer = WordNetLemmatizer()\n\ndef preprocess_text(text):\n    text = text.lower()\n    text = re.sub(r'\\[.*?\\]', '', text) # Remove text in brackets\n    text = re.sub(r'https?://\\S+|www\\.\\S+', '', text) # Remove URLs\n    text = re.sub(r'<.*?>+', '', text) # Remove HTML tags\n    text = re.sub(r'[%s]' % re.escape(string.punctuation), '', text) # Remove punctuation\n    text = re.sub(r'\\n', '', text) # Remove newlines\n    text = re.sub(r'\\w*\\d\\w*', '', text) # Remove words containing numbers\n    text = ' '.join([lemmatizer.lemmatize(word) for word in text.split() if word not in stop_words])\n    return text.strip()\n\n# Apply preprocessing to the text column\ndf['cleaned_text'] = df['text'].apply(preprocess_text)\n\nprint(\"\\nOriginal vs Cleaned Text Example:\")\nprint(\"Original:\", df['text'].iloc[0])\nprint(\"Cleaned:\", df['cleaned_text'].iloc[0])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-15T16:47:36.924138Z","iopub.execute_input":"2025-07-15T16:47:36.925017Z","iopub.status.idle":"2025-07-15T16:49:11.303692Z","shell.execute_reply.started":"2025-07-15T16:47:36.924990Z","shell.execute_reply":"2025-07-15T16:49:11.302968Z"}},"outputs":[{"name":"stdout","text":"\nOriginal vs Cleaned Text Example:\nOriginal: Ex Wife Threatening SuicideRecently I left my wife for good because she has cheated on me twice and lied to me so much that I have decided to refuse to go back to her. As of a few days ago, she began threatening suicide. I have tirelessly spent these paat few days talking her out of it and she keeps hesitating because she wants to believe I'll come back. I know a lot of people will threaten this in order to get their way, but what happens if she really does? What do I do and how am I supposed to handle her death on my hands? I still love my wife but I cannot deal with getting cheated on again and constantly feeling insecure. I'm worried today may be the day she does it and I hope so much it doesn't happen.\nCleaned: ex wife threatening suiciderecently left wife good cheated twice lied much decided refuse go back day ago began threatening suicide tirelessly spent paat day talking keep hesitating want believe ill come back know lot people threaten order get way happens really supposed handle death hand still love wife cannot deal getting cheated constantly feeling insecure im worried today may day hope much doesnt happen\n","output_type":"stream"}],"execution_count":13},{"cell_type":"code","source":"# Define features (X) and target (y)\nX = df['cleaned_text']\ny = df['class']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)\n\n# Initialize TF-IDF Vectorizer\nvectorizer = TfidfVectorizer(max_features=5000, ngram_range=(1, 2))\n\n# Fit the vectorizer on the training data and transform both train and test\nX_train_vec = vectorizer.fit_transform(X_train)\nX_test_vec = vectorizer.transform(X_test)\n\nprint(\"\\nShape of TF-IDF vectors (Train):\", X_train_vec.shape)\nprint(\"Shape of TF-IDF vectors (Test):\", X_test_vec.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-15T16:49:28.904639Z","iopub.execute_input":"2025-07-15T16:49:28.904923Z","iopub.status.idle":"2025-07-15T16:50:08.832697Z","shell.execute_reply.started":"2025-07-15T16:49:28.904902Z","shell.execute_reply":"2025-07-15T16:50:08.831955Z"}},"outputs":[{"name":"stdout","text":"\nShape of TF-IDF vectors (Train): (185659, 5000)\nShape of TF-IDF vectors (Test): (46415, 5000)\n","output_type":"stream"}],"execution_count":14},{"cell_type":"code","source":"# Initialize and train the Logistic Regression model\nmodel = LogisticRegression(max_iter=1000, solver='liblinear') \nmodel.fit(X_train_vec, y_train)\nprint(\"Model training complete.\")\n\n# Make predictions on the test set\ny_pred = model.predict(X_test_vec)\n\n# Evaluate the model\nprint(\"\\n--- Model Evaluation ---\")\nprint(\"Classification Report:\")\nprint(classification_report(y_test, y_pred))\n\nprint(\"\\nAccuracy Score:\")\nprint(f\"Accuracy: {accuracy_score(y_test, y_pred):.4f}\")\n\nprint(\"\\nConfusion Matrix:\")\nprint(confusion_matrix(y_test, y_pred))\n\njoblib.dump(model, 'mental_health_model.pkl')\njoblib.dump(vectorizer, 'tfidf_vectorizer.pkl')\nprint(\"\\nModel and Vectorizer saved to mental_health_model.pkl and tfidf_vectorizer.pkl in /kaggle/working/\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-15T16:50:21.153640Z","iopub.execute_input":"2025-07-15T16:50:21.153936Z","iopub.status.idle":"2025-07-15T16:50:35.791772Z","shell.execute_reply.started":"2025-07-15T16:50:21.153915Z","shell.execute_reply":"2025-07-15T16:50:35.791037Z"}},"outputs":[{"name":"stdout","text":"Model training complete.\n\n--- Model Evaluation ---\nClassification Report:\n              precision    recall  f1-score   support\n\n non-suicide       0.93      0.94      0.93     23208\n     suicide       0.94      0.92      0.93     23207\n\n    accuracy                           0.93     46415\n   macro avg       0.93      0.93      0.93     46415\nweighted avg       0.93      0.93      0.93     46415\n\n\nAccuracy Score:\nAccuracy: 0.9327\n\nConfusion Matrix:\n[[21851  1357]\n [ 1768 21439]]\n\nModel and Vectorizer saved to mental_health_model.pkl and tfidf_vectorizer.pkl in /kaggle/working/\n","output_type":"stream"}],"execution_count":15},{"cell_type":"code","source":"class_names = model.classes_.tolist()\nwrapped_model = ClassifierWrapper(vectorizer, model, class_names)\nexplainer = lime.lime_text.LimeTextExplainer(\n    class_names=class_names,\n    random_state=42\n)\n\nprint(\"\\n--- LIME Explanation Demonstration ---\")\n\nsample_idx = 5\n\nsample_text = X_test.iloc[sample_idx]\ntrue_label = y_test.iloc[sample_idx]\n\nprocessed_sample_text = preprocess_text(sample_text)\npredicted_label = model.predict(vectorizer.transform([processed_sample_text]))[0]\n\nprint(f\"Sample Text: {sample_text}\")\nprint(f\"True Label: {true_label}\")\nprint(f\"Predicted Label: {predicted_label}\")\n\npredicted_label_index = class_names.index(predicted_label)\n\nexplanation = explainer.explain_instance(\n    sample_text,\n    wrapped_model.predict_proba,\n    num_features=10,\n    labels=[predicted_label_index]\n)\n\nprint(\"\\nExplanation (Word: Contribution to Prediction):\")\nfor word, weight in explanation.as_list(label=predicted_label_index):\n    print(f\"  '{word}': {weight:.4f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-15T16:50:39.958821Z","iopub.execute_input":"2025-07-15T16:50:39.959044Z","iopub.status.idle":"2025-07-15T16:50:41.938452Z","shell.execute_reply.started":"2025-07-15T16:50:39.959026Z","shell.execute_reply":"2025-07-15T16:50:41.937665Z"}},"outputs":[{"name":"stdout","text":"\n--- LIME Explanation Demonstration ---\nSample Text: accurate probably isn’t either fucked nothing change power vacuum north korea could disaster especially live north korea south korea japan u nato member state nato ally non nato ally u china possibly russia japan u south korea intervene would force u intervene would force nato intervene china would intervene cuz don’t want american troop directly across border north korea buffer state south korea china let’s hope people aren’t fighting power pyongyang cuz far know there’s planned successor dy power vacuum someone fill probably thing probably happen either there’s seamless transition someone else b multiple people power would try become supreme leader violence break pyongyang people power c north korea technically republic maybe would lol going\nTrue Label: non-suicide\nPredicted Label: non-suicide\n\nExplanation (Word: Contribution to Prediction):\n  'power': 0.1305\n  'cuz': 0.0481\n  'would': -0.0465\n  'planned': -0.0342\n  'fighting': -0.0292\n  'american': 0.0281\n  'live': -0.0277\n  'force': 0.0235\n  'lol': 0.0218\n  'south': 0.0170\n","output_type":"stream"}],"execution_count":18}]}